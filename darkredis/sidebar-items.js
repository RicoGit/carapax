initSidebarItems({"enum":[["Error","The `darkredis` error type."],["Value","Enum depicting the various possible responses one can get from Redis."]],"struct":[["Command","A struct for defining commands manually. If you want to run multiple commands in a pipeline, use `CommandList`. # Example  ``` use darkredis::{Command, Connection}; # use darkredis::*; # #[tokio::main] # async fn main() { # let mut connection = Connection::connect(\"127.0.0.1:6379\").await.unwrap(); # connection.del(\"singular-key\").await.unwrap();"],["CommandList","A struct for defining commands manually, which allows for pipelining of several commands. If you need to only run one command, use `Command`, which has almost the same API. # Example  ``` use darkredis::{CommandList, Connection}; use futures::TryStreamExt; //for `try_collect` # use darkredis::*; # #[tokio::main] # async fn main() { # let mut connection = Connection::connect(\"127.0.0.1:6379\").await.unwrap(); # connection.del(\"pipelined-list\").await.unwrap();"],["Connection","A connection to Redis. Copying is cheap as the inner type is a simple, futures-aware, `Arc<Mutex>`, and will not create a new connection. Use a `ConnectionPool` if you want to use pooled conections. Alternatively, there's the `deadpool-darkredis` crate. Every convenience function can work with any kind of data as long as it can be converted into bytes. Check the Redis command reference for in-depth explanations of each command."],["ConnectionPool","A connection pool. Clones are cheap and is the expected way to send the pool around your application."],["MSetBuilder","A builder struct for commands where you set multiple values at once. It utilizes references to ensure that it does not copy any of the data given to it. It supports the classic builder-pattern, as well as a mutable pattern. # Example ``` # use darkredis::MSetBuilder;  //Builder-style let mut builder = MSetBuilder::new().set(b\"example-key\", b\"some-value\");"],["Message","A message received from a channel."],["MessageStream","A stream of `Message`s."],["PMessage","A message received from a channel (Pattern version)"],["PMessageStream","A stream of `PMessage`s. See `MessageStream` for more info."],["ResponseStream","A stream of responses from a pipelined command."]],"trait":[["ToSocketAddrs","Converts or resolves without blocking to one or more `SocketAddr` values."]],"type":[["Result","Result type used in the whole crate."]]});